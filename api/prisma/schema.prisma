// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator fabbrica {
  provider = "prisma-fabbrica"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  password    String
  name        String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  factorsSets FactorsSet[]
}

model FactorsSet {
  id         Int         @id @default(autoincrement()) // Scalar Type
  name       String
  userId     Int
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  deletedAt  DateTime?
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  motivators Motivator[]
  stressors  Stressor[]
  templates  Template[]
}

model Motivator {
  id           Int        @id @default(autoincrement()) // Scalar Type
  name         String
  weight       Int
  variable     Boolean?
  factorsSetId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
  factorsSets  FactorsSet @relation(fields: [factorsSetId], references: [id], onDelete: Cascade)
}

model Stressor {
  id           Int        @id @default(autoincrement())
  name         String
  weight       Int
  variable     Boolean?
  factorsSetId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
  factorsSets  FactorsSet @relation(fields: [factorsSetId], references: [id], onDelete: Cascade)
}

model Template {
  id           Int        @id @default(autoincrement())
  name         String
  factorsSetId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
  factorsSets  FactorsSet @relation(fields: [factorsSetId], references: [id], onDelete: Cascade)
}
